{"version":3,"sources":["../src/DropdownInput.tsx"],"names":["DropdownInput","o","variant","children","randomString","onChange","label","data","props","ref","selectedValue","setSelectedValue","partnerFuse","Fuse","fuseSearchPartner","str","findList","useEffect","result","jsxs","jsx","value","item"],"mappings":"2jBAaaA,CAAAA,CAAsBC,YAAA,CAAA,UAAA,CACjC,CAAC,CAAE,OAAA,CAAAC,EAAU,SAAA,CAAW,QAAA,CAAAC,EAAS,YAAA,CAAAC,CAAAA,CAAa,SAAAC,CAAAA,CAAS,KAAA,CAAAC,EAAM,EAAA,CAAG,IAAA,CAAAC,EAAM,GAAGC,CAAM,EAAGC,CAAAA,GAAQ,KAClF,CAACC,CAAAA,CAAeC,CAAgB,CAAA,CAAUV,YAAA,CAAA,QAAA,CAAiB,EAAE,CAAA,CAS7DW,CAAAA,CAAc,IAAIC,kBAAAA,CAAKN,CAAAA,CAAM,CAC/B,IAAA,CAAM,CAAC,MAAM,CACjB,CAAC,EAEKO,CAAAA,CAAqBC,CAAAA,EAAgB,CAEvC,IAAMC,CAAAA,CAAWJ,EAAY,MAAA,CAAOG,CAAG,EAIvC,OAFeC,CAAAA,CAAS,OAAS,CAAA,CAAIA,CAAAA,CAAS,CAAC,CAAA,CAAI,EAGzD,EAEE,OAAAC,WAAAA,CAAU,IAAM,CACZ,GAAIb,CAAAA,CAAc,CACd,IAAMc,CAAAA,CAASJ,CAAAA,CAAkBV,CAAY,CAAA,CAC1Cc,CAAAA,EACHP,EAAiBO,CAAAA,CAAO,IAAA,CAAK,IAAI,CAAA,CACjCb,CAAAA,CAASa,EAAO,IAAI,CAAA,GAElBP,EAAiB,EAAE,CAAA,CACnBN,EAAS,EAAE,CAAA,EAGjB,CAEJ,CAAA,CAAE,CAACD,CAAY,CAAC,CAAA,CAgBZe,gBAAC,KAAA,CAAA,CACG,QAAA,CAAA,CAAAC,eAAC,OAAA,CAAA,CAAO,QAAA,CAAAd,EAAM,CAAA,CACdc,cAAAA,CAAC,UAAO,QAAA,CAhBM,CAAA,EAA4C,CAC9D,IAAMC,CAAAA,CAAQ,EAAE,MAAA,CAAO,KAAA,CAChBH,EAASJ,CAAAA,CAAkBO,CAAK,EAClCH,CAAAA,EACDP,CAAAA,CAAiBO,EAAO,IAAA,CAAK,IAAI,EACjCb,CAAAA,CAASa,CAAAA,CAAO,IAAI,CAAA,GAEpBP,CAAAA,CAAiB,EAAE,CAAA,CACnBN,CAAAA,CAAS,EAAE,CAAA,EAGnB,CAAA,CAKwC,MAAOK,CAAAA,CAAe,SAAA,CAAU,oQAC3D,QAAA,CAAAH,CAAAA,CAAK,IAAKe,CAAAA,EACPF,cAAAA,CAAC,UAAqB,KAAA,CAAOE,CAAAA,CAAK,KACjC,QAAA,CAAAA,CAAAA,CAAK,MADOA,CAAAA,CAAK,EAElB,CACH,CAAA,CACL,CAAA,CAAA,CACJ,CAEN,CACF,EACAtB,EAAc,WAAA,CAAc,eAAA","file":"index.cjs","sourcesContent":["import Fuse from \"fuse.js\";\r\nimport * as React from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport type InputProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\r\n  variant?: \"primary\" | \"ghost\";\r\n  randomString: string;\r\n  label?: string;\r\n  onChange: (value: string | {name: string, id: number}) => void;\r\n  data: {name: string, id: number}[];\r\n};\r\n\r\n\r\nexport const DropdownInput = React.forwardRef<HTMLButtonElement, InputProps>(\r\n  ({ variant = \"primary\", children,randomString,onChange,label='',data, ...props }, ref) => {\r\n    const [selectedValue, setSelectedValue] = React.useState<string>(\"\");\r\n\r\n    const base =\r\n      \"inline-flex items-center justify-center rounded-lg px-4 py-2 text-sm font-medium\";\r\n    const styles =\r\n      variant === \"primary\"\r\n        ? `${base} bg-black text-white hover:opacity-90`\r\n        : `${base} border border-gray-300 hover:bg-gray-50`;\r\n\r\n    const partnerFuse = new Fuse(data, {\r\n        keys: ['name'],\r\n    })\r\n\r\n    const fuseSearchPartner = (str: string) => {\r\n       \r\n        const findList = partnerFuse.search(str)\r\n\r\n        const result = findList.length > 0 ? findList[0] : ''\r\n\r\n        return result\r\n  }\r\n\r\n    useEffect(() => {\r\n        if (randomString) {\r\n            const result = fuseSearchPartner(randomString);\r\n            if(result) {\r\n            setSelectedValue(result.item.name);\r\n            onChange(result.item);  \r\n            }else{\r\n              setSelectedValue('');\r\n              onChange('');\r\n            }\r\n            \r\n        }\r\n\r\n    },[randomString])\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const value = e.target.value;\r\n         const result = fuseSearchPartner(value);\r\n         if (result) {\r\n            setSelectedValue(result.item.name);\r\n            onChange(result.item);\r\n         }else{\r\n            setSelectedValue('');\r\n            onChange('');\r\n         }\r\n        \r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <select onChange={handleChange} value={selectedValue} className=\"bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\">\r\n                {data.map((item) => (\r\n                    <option key={item.id} value={item.name}>\r\n                    {item.name}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    );\r\n  }\r\n);\r\nDropdownInput.displayName = \"DropdownInput\";"]}